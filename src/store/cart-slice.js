import { createSlice } from '@reduxjs/toolkit';

// Define a slice of the Redux state for managing cart-related data
const cartSlice = createSlice({
  name: 'cart', // Name of the slice
  initialState: {
    // Initial state of the slice
    items: [], // Array to store cart items
    totalQuantity: 0, // Total quantity of items in the cart
    changed: false, // Flag to indicate if the cart has changed
  },
  reducers: {
    // Define reducer functions to handle state updates
    replaceCart(state, action) {
      // Reducer function to replace the entire cart state
      state.totalQuantity = action.payload.totalQuantity; // Update total quantity
      state.items = action.payload.items; // Update cart items
    },
    addItemToCart(state, action) {
      // Reducer function to add an item to the cart
      const newItem = action.payload; // Get the new item from the payload
      const existingItem = state.items.find((item) => item.id === newItem.id); // Check if the item already exists in the cart
      state.totalQuantity++; // Increment total quantity
      state.changed = true; // Set changed flag to true
      if (!existingItem) {
        // If the item does not exist in the cart
        state.items.push({
          // Add the new item to the cart items array
          id: newItem.id,
          price: newItem.price,
          quantity: 1,
          totalPrice: newItem.price,
          name: newItem.title,
        });
      } else {
        // If the item already exists in the cart
        existingItem.quantity++; // Increment quantity of existing item
        existingItem.totalPrice = existingItem.totalPrice + newItem.price; // Update total price of existing item
      }
    },
    removeItemFromCart(state, action) {
      // Reducer function to remove an item from the cart
      const id = action.payload; // Get the ID of the item to be removed
      const existingItem = state.items.find((item) => item.id === id); // Find the existing item in the cart
      state.totalQuantity--; // Decrement total quantity
      state.changed = true; // Set changed flag to true
      if (existingItem.quantity === 1) {
        // If the quantity of the existing item is 1 (i.e., removing the last item)
        state.items = state.items.filter((item) => item.id !== id); // Remove the item from the cart
      } else {
        // If the quantity of the existing item is greater than 1
        existingItem.quantity--; // Decrement quantity of existing item
        existingItem.totalPrice = existingItem.totalPrice - existingItem.price; // Update total price of existing item
      }
    },
  },
});

// Export the action creators generated by createSlice
export const cartActions = cartSlice.actions;

// Export the reducer function generated by createSlice
export default cartSlice;
